inherit_from: experiments/config_default.yaml
VERBOSE: true
name: '3DSSG_INSEG_1'
GPU: [0]
training:
 batch: 1
 data_workers: 4
 lr: 1e-4
 patient: 30
 optimizer: 'adamw'
 amsgrad: true
 lambda_mode: constant # [constant, dynamic]. dynamic will calculate the ratio of the number of node and edge.
 lambda_node: 0.1 # learning rate ratio
 lambda_edge: 1.0 # learning rate ratio
 scheduler:
  method: reduceluronplateau # [none, multisteplr, reduceluronplateau]
  args: {
    mode: max, 
    verbose: true,
    milestones: [750, 1000],
    gamma: 0.5,
    factor: 0.9,
  }
 out_dir: experiments/
 model_selection_metric: recalls_node_cls
 model_selection_mode: maximize # can be maximize or minimize. e.g. if it's "loss", should "minimize", if it's accuracy, should "maximize"
 max_epoch: 500
eval: #evaluation
 mode: instance #eval on [segment, instance].  
 data_workers: 8
 topK: 10
 ignore_missing: false
model:
 method: sgpn
 multi_rel: false # multiple relationship 
 use_rgb: false
 use_normal: false
 use_spatial: false
 num_points_union: 512 # for 3DSSG
 node_feature_dim: 256
 edge_feature_dim: 256
 edge_descriptor_dim: 11
 node_encoder:
  method: sgfn #
 edge_encoder:
  method: sgfn #
 image_encoder:
  method: none #[none,mvcnn,mean]
 gnn:
  method: triplet # [none, fan, triplet]
  hidden_dim: 512
  num_layers: 5
  num_heads: 0
  drop_out: 0
  node_from_gnn: false
data:
 input_type: sgfn #[3RScan, graph, sgfn, sgpn]
 path: "./data/3RScan_ScanNet20/"
 path_gt: "./data/3RScan_ScanNet20_gt/"
 img_feature_path: "/media/sc/SSD1TB/storage/kf_feature/"
 label_file: "inseg.ply"
 roi_img_path: "/media/sc/SSD1TB/dataset/3RScan/roi_images.h5"
 rel_data_type: points # [points, descriptor]
 data_augmentation: true
 sample_in_runtime: true
 is_roi_img: true
 load_images: false
 load_points: true
 load_cache: true
 sample_num_nn: 1
 sample_num_seed: 2
 drop_img_edge: 4 # if is int and >0, select given number. if is float/double, select percentage between [1-x,1]
 drop_img_edge_eval: 0
 drop_edge: 0.5 # if is int and >0, select given number. if is float/double, select percentage between [1-x,1]
 drop_edge_eval: 0 # if is int and >0, select given number. if is float/double, select percentage between [1-x,1]
 normalize_weight: true 
 max_num_edge: 120 # maximum number of edges for training (to save memory)
 full_edge: false # connect all selected nodes
 img_size: -1 # minimum image edge will be resize to this. (-1: keep origianl)
 roi_img_size: [256,256]
 obj_ignore_list: []
 use_precompute_img_feature: false
 bbox_aug_ratio: 0 # [0.,1.]. 0: no aug. 
logging:
 method: wandb # [tensorboard, wandb, none]
 log_grad_freq: 1000 
 log_graph: True
wandb:
 dry_run: true
 entity: 'shunchengwu'
 project: "ssg"
 tags: ["ssg", "sgfn","inseg"]
 dir: logs/
